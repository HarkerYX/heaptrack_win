From 483c705175835bd86009172943565ebd44b530ae Mon Sep 17 00:00:00 2001
From: Jeremy Tan <jtanx@outlook.com>
Date: Sun, 29 Aug 2021 22:03:27 +1000
Subject: [PATCH 2/2] Add path relocation

---
 src/analyze/gui/mainwindow.cpp | 56 +++++++++++++++++++++++++++++-----
 1 file changed, 49 insertions(+), 7 deletions(-)

diff --git a/src/analyze/gui/mainwindow.cpp b/src/analyze/gui/mainwindow.cpp
index 63a46a2..efd03fe 100644
--- a/src/analyze/gui/mainwindow.cpp
+++ b/src/analyze/gui/mainwindow.cpp
@@ -73,6 +73,7 @@ const char CodeNavigation[] = "CodeNavigation";
 namespace Entries {
 const char State[] = "State";
 const char CustomCommand[] = "CustomCommand";
+const char PathRelocation[] = "PathRelocation";
 const char IDE[] = "IDE";
 }
 }
@@ -152,9 +153,6 @@ void addLocationContextMenu(QTreeView* treeView, MainWindow* window)
         Q_ASSERT(resultData);
         const auto location = index.data(SourceMapModel::LocationRole).value<FileLine>();
         const auto file = resultData->string(location.fileId);
-        if (!QFile::exists(file)) {
-            return;
-        }
         auto menu = new QMenu(treeView);
         auto openFile =
             new QAction(QIcon::fromTheme(QStringLiteral("document-open")), i18n("Open file in editor"), menu);
@@ -168,8 +166,7 @@ void addLocationContextMenu(QTreeView* treeView, MainWindow* window)
         Q_ASSERT(resultData);
         const auto location = index.data(SourceMapModel::LocationRole).value<FileLine>();
         const auto file = resultData->string(location.fileId);
-        if (QFile::exists(file))
-            window->navigateToCode(file, location.line);
+        window->navigateToCode(file, location.line);
     });
 }
 
@@ -801,6 +798,13 @@ void MainWindow::setupCodeNavigationMenu()
     menu->addAction(action);
 #endif
 
+    menu->addSeparator();
+    action = new QAction(menu);
+    action->setText(i18n("Path relocation"));
+    action->setData(-3);
+    group->addAction(action);
+    menu->addAction(action);
+
     QObject::connect(group, &QActionGroup::triggered, this, &MainWindow::setCodeNavigationIDE);
 
     configAction->setMenu(menu);
@@ -822,12 +826,44 @@ void MainWindow::setCodeNavigationIDE(QAction* action)
             settings.writeEntry(Config::Entries::IDE, -1);
         }
         return;
+    } else if (action->data() == -3) {
+        const auto relocationRegex =
+            QInputDialog::getText(this, i18n("Path Relocation"),
+                                  i18n("Specify a set of regex replacements to be applied to the file path.\nUse the semicolon (;) as the delimiter.\n"
+                                     "For example: \"^/usr/bin;/bin;^/usr/local/bin;/bin\" - will apply two regex replacements for /usr/bin and /usr/local/bin to /bin."),
+                                  QLineEdit::Normal, settings.readEntry(Config::Entries::PathRelocation));
+        const auto parts = relocationRegex.split(QString::fromUtf8(";"));
+        if (!relocationRegex.isEmpty() && (parts.size() % 2) != 0) {
+            showError(i18n("Path relocations must be specified in replacement pairs."));
+            return;
+        }
+        for (int i = 0; i+1 < parts.size(); i += 2) {
+            if (!QRegExp(parts.at(i)).isValid()) {
+                showError(i18n("Path relocation regex was invalid: %1.", parts.at(i)));
+                return;
+            }
+        }
+        settings.writeEntry(Config::Entries::PathRelocation, relocationRegex);
+        return;
     }
 
     const auto defaultIde = action->data().toInt();
     settings.writeEntry(Config::Entries::IDE, defaultIde);
 }
 
+QString applyRelocation(const KConfigGroup& settings, QString file)
+{
+    const auto parts = settings.readEntry(Config::Entries::PathRelocation).split(QString::fromUtf8(";"));
+    for (int i = 0; i+1 < parts.size(); i += 2) {
+        QRegExp re(parts.at(i));
+        if (!re.isValid()) {
+            continue;
+        }
+        file.replace(re, parts.at(i+1));
+    }
+    return file;
+}
+
 void MainWindow::navigateToCode(const QString& filePath, int lineNumber, int columnNumber)
 {
     const auto settings = m_config->group(Config::Groups::CodeNavigation);
@@ -840,15 +876,21 @@ void MainWindow::navigateToCode(const QString& filePath, int lineNumber, int col
         command = settings.readEntry(Config::Entries::CustomCommand);
     }
 
+    const auto relocatedPath = applyRelocation(settings, filePath);
+    if (!QFile::exists(relocatedPath)) {
+        showError(i18n("File does not exist %1.", relocatedPath));
+        return;
+    }
+
     if (!command.isEmpty()) {
-        command.replace(QStringLiteral("%f"), filePath);
+        command.replace(QStringLiteral("%f"), relocatedPath);
         command.replace(QStringLiteral("%l"), QString::number(std::max(1, lineNumber)));
         command.replace(QStringLiteral("%c"), QString::number(std::max(1, columnNumber)));
 
         auto splitted = KShell::splitArgs(command);
         QProcess::startDetached(splitted.takeFirst(), splitted);
     } else {
-        QDesktopServices::openUrl(QUrl::fromLocalFile(filePath));
+        QDesktopServices::openUrl(QUrl::fromLocalFile(relocatedPath));
     }
 }
 
-- 
2.33.0

